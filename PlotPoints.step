# Define hotkeys for viewing plot points. 
MenuItem "Monster High" "Show plot point menu" [ShowPlotPointMenu].
MenuItem "Monster High" "Show six random events" [Events].

# Entry point for execute 6 random events
[main]
Events: [InitializeFluents] [Event] [Event] [Event] [Event] [Event] [Event]

# Entry point for executing a single random event
[main]
SingleEvent: [InitializeFluents] [Event]

Event: [NewLine] [ClearContext] [SelectAndExecute] [Paragraph]

# SelectAndExecute
# Select a random plot point available in the current state and execute it. 
SelectAndExecute:
    [FindUnique ?e [PlotPoint ?e] ?eventList] 
    [RandomElement ?eventList ?event]
    [PlotPoint ?event] 
    [ExecutePlotPoint ?event]
[end]

# ExecuteSelectedPlotPoint
# Given a plot point, execute it, and show the plot point menu for the new state.
ExecuteSelectedPlotPoint ?plotPoint:
    [ClearContext]
    [ExecutePlotPoint ?plotPoint]
    [Paragraph]
    [MakePlotPointButtons]
[end]

# AddPlotPointButton
# Given a plot point, write it as a link. If the link is clicked, runs the task
# ExecuteSelectedPlotPoint. 
AddPlotPointButton ?plotPoint:
    [ClearContext]
    [SaveText [Write ?plotPoint] ?label]
    [AddButton ?label [ExecuteSelectedPlotPoint ?plotPoint]]
[end]

# ShowPlotPointMenustep
# Entry point for interactively selecting and executing available plot points.
# Resets the state to the initial story state, and writes the plot point menu. 
[main]
ShowPlotPointMenu:
    [EnvironmentOption discardState]
    [EnvironmentOption retainState]
    [InitializeFluents]
    [MakePlotPointButtons]
[end]

# AddPlotPointButtonMenu
# For each of the plot points applicable in the current story state, adds them to a menu.
[main]
MakePlotPointButtons: 
    [ForEach [PlotPoint ?event] [AddPlotPointButton ?event]]
[end] 

###
### What you need to write
###

[main]
[randomly]
predicate PlotPoint ?event.
# ?event is a possible plot point in a Monster High episode given
# the characters and their relationships.  Fill in methods for this,
# below.
#    PlotPoint ?event: 

[main]
[randomly]
task ExecutePlotPoint ?event.
# Generate text to describe the specified plot point. Fill in methods
# for this, below.

###
### Place your code below
###


PlotPoint [confess_love ?a ?b]: [CrushOn ?a ?b] [Not [Dating ?a ?b]]

PlotPoint [start_dating ?a ?b]: 
    [MutualAttraction ?a ?b]
    [Not [Dating ?a ?b]]
    [Knows ?a [CrushOn ?b ?a]]
    [IsA ?a ?atype]
    [IsA ?b ?btype]
    [Not [StarCrossedLovers ?a ?atype ?b ?btype]]
[end]

PlotPoint [start_dating ?a ?b]: 
    [MutualAttraction ?a ?b]
    [Not [Dating ?a ?b]]
    [Knows ?a [CrushOn ?b ?a]]
    [IsA ?a ?atype]
    [IsA ?b ?btype]
    [StarCrossedLovers ?a ?atype ?b ?btype]
    [Confident ?a]
[end]

PlotPoint [romantic_rejection ?rejector ?rejected]: 
    [Knows ?rejector [CrushOn ?rejected ?rejector]]
    [UnrequitedLove ?rejected ?rejector]
[end]

PlotPoint [fight ?attacker ?defender [triangle ?attacker ?defender ?loveInterest]]: 
    [LoveTriangle ?attacker ?defender ?loveInterest] 
[end]

PlotPoint [fight ?cheatee ?cheater [cheating ?cheater ?cheatee ?other]]:
    [CheatingOnWith ?cheater ?cheatee ?other]
[end]

PlotPoint [breakup ?char1 ?char2]: 
    [Dating ?char1 ?char2] 
    [HadFightWith ?char1 ?char2]
[end]

##PlotPoint [smoldering_look ?a ?b ?_club]:
##    [MutualAttraction ?a ?b] 
##    [SameClub ?a ?b]
##[end]

#Can show repetetive two way scenario. Add not =?
PlotPoint [star_crossed_lovers ?a ?atype ?b ?btype]: 
    [IsA ?a ?atype]
    [IsA ?b ?btype]
    [StarCrossedLovers ?a ?atype ?b ?btype]
[end]

PlotPoint [support_from_friend ?supporter ?supportee [star_crossed_lovers ?supportee ?supporteeType ?crush ?crushType]]: 
    [IsA ?supportee ?supporteeType]
    [IsA ?crush ?crushType]
    [StarCrossedLovers ?supportee ?supporteeType ?crush ?crushType] 
    [Friend ?supporter ?supportee]
[end]